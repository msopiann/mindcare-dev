// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts                Account[]
  sessions                Session[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  Event                   Event[]
  Resource                Resource[]

  chatSessions ChatSession[]

  @@map("users")
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String?
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Event {
  id                 String      @id @default(cuid())
  title              String
  description        String?     @db.Text
  startDate          DateTime
  endDate            DateTime? // null for single-day events
  location           String
  price              Float? // null for free events
  image              String?
  link               String // external source link
  highlighted        Boolean     @default(false)
  ticketAvailability Boolean     @default(true)
  status             EventStatus @default(UPCOMING)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  createdById        String
  createdBy          User        @relation(fields: [createdById], references: [id])

  @@map("events")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  publisher   String
  image       String?
  link        String
  highlighted Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String
  createdBy   User         @relation(fields: [createdById], references: [id])

  @@map("resources")
}

model EventBanner {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("event_banners")
}

model ResourceBanner {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("resource_banners")
}

model RecommendationCard {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String
  link        String
  category    String
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("recommendation_cards")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  topic     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chat_sessions")
}

model Message {
  id         String   @id @default(cuid())
  sessionId  String
  content    String
  isFromUser Boolean
  createdAt  DateTime @default(now())

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model SystemPrompt {
  id        String   @id @default(cuid())
  name      String
  content   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_prompts")
}

enum UserRole {
  USER
  ADMIN
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum ResourceType {
  ARTICLE
  VIDEO
  PODCAST
  GUIDE
  TOOL
}
